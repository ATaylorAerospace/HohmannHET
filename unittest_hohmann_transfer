classdef TestHohmannTransfer < matlab.unittest.TestCase
    methods (Test)
        function testValidTransfer(testCase)
            % Test case: Transfer from 500 km to 2000 km orbit
            initial_altitude = 500.0;   % km
            final_altitude = 2000.0;    % km
            
            % Create an instance of HohmannTransfer
            transfer = HohmannTransfer(initial_altitude, final_altitude);
            
            % Expected results (pre-calculated)
            MU = HohmannTransfer.MU;          % Earth's gravitational parameter
            R_EARTH = HohmannTransfer.R_EARTH; % Earth's radius
            r1 = R_EARTH + initial_altitude;
            r2 = R_EARTH + final_altitude;
            a_transfer_expected = (r1 + r2) / 2;
            v1 = sqrt(MU / r1);
            v_transfer_1 = sqrt(MU * (2 / r1 - 1 / a_transfer_expected));
            delta_v_departure_expected = v_transfer_1 - v1;
            v2 = sqrt(MU / r2);
            v_transfer_2 = sqrt(MU * (2 / r2 - 1 / a_transfer_expected));
            delta_v_arrival_expected = v2 - v_transfer_2;
            total_delta_v_expected = delta_v_departure_expected + delta_v_arrival_expected;
            transfer_time_expected = pi * sqrt(a_transfer_expected^3 / MU); % seconds
            
            % Tolerance for floating-point comparisons
            tolerance = 1e-6;
            
            % Verify semi-major axis
            testCase.verifyEqual(transfer.a_transfer, a_transfer_expected, 'AbsTol', tolerance);
            
            % Verify delta-V for departure burn
            testCase.verifyEqual(transfer.delta_v_departure, delta_v_departure_expected, 'AbsTol', tolerance);
            
            % Verify delta-V for arrival burn
            testCase.verifyEqual(transfer.delta_v_arrival, delta_v_arrival_expected, 'AbsTol', tolerance);
            
            % Verify total delta-V
            total_delta_v = transfer.delta_v_departure + transfer.delta_v_arrival;
            testCase.verifyEqual(total_delta_v, total_delta_v_expected, 'AbsTol', tolerance);
            
            % Verify transfer time
            testCase.verifyEqual(transfer.calculateTransferTime(), transfer_time_expected, 'AbsTol', tolerance);
        end
        
        function testNegativeAltitude(testCase)
            % Test with negative initial altitude
            initial_altitude = -500;    % km
            final_altitude = 2000;      % km
            
            % Verify that an error is thrown
            testCase.verifyError(@() HohmannTransfer(initial_altitude, final_altitude), 'MATLAB:invalid_argument');
        end
        
        function testZeroAltitude(testCase)
            % Test with zero initial altitude
            initial_altitude = 0;       % km
            final_altitude = 2000;      % km
            
            % Verify that an error is thrown
            testCase.verifyError(@() HohmannTransfer(initial_altitude, final_altitude), 'MATLAB:invalid_argument');
        end
        
        function testSameAltitudes(testCase)
            % Test transfer between the same altitudes
            initial_altitude = 500;     % km
            final_altitude = 500;       % km
            
            % Create an instance
            transfer = HohmannTransfer(initial_altitude, final_altitude);
            
            % Expected delta-Vs should be zero
            testCase.verifyEqual(transfer.delta_v_departure, 0, 'AbsTol', 1e-6);
            testCase.verifyEqual(transfer.delta_v_arrival, 0, 'AbsTol', 1e-6);
            testCase.verifyEqual(transfer.calculateTransferTime(), 0, 'AbsTol', 1e-6);
        end
        
        function testHighAltitudeTransfer(testCase)
            % Test transfer from low Earth orbit to geostationary orbit
            initial_altitude = 200;       % km
            final_altitude = 35786;       % km (approximate GEO altitude)
            
            % Create an instance
            transfer = HohmannTransfer(initial_altitude, final_altitude);
            
            % Expected results (pre-calculated)
            MU = HohmannTransfer.MU;
            R_EARTH = HohmannTransfer.R_EARTH;
            r1 = R_EARTH + initial_altitude;
            r2 = R_EARTH + final_altitude;
            a_transfer_expected = (r1 + r2) / 2;
            transfer_time_expected = pi * sqrt(a_transfer_expected^3 / MU); % seconds
            
            % Tolerance
            tolerance = 1e-6;
            
            % Verify transfer time
            testCase.verifyEqual(transfer.calculateTransferTime(), transfer_time_expected, 'AbsTol', tolerance);
        end
    end
end
