classdef HohmannTransferTest < matlab.unittest.TestCase
    % Test class for HohmannTransfer implementation
    
    properties (Constant)
        % Test tolerance for floating-point comparisons
        EPSILON = 1e-10
        
        % Common orbital altitudes (km)
        LEO_ALTITUDE = 400     % Low Earth Orbit
        MEO_ALTITUDE = 20200   % Medium Earth Orbit (GPS)
        GEO_ALTITUDE = 35786   % Geostationary Orbit
    end
    
    properties
        % Test objects
        transferLEOtoGEO
        transferLEOtoMEO
    end
    
    methods(TestMethodSetup)
        function createTestObjects(testCase)
            % Create test objects before each test
            testCase.transferLEOtoGEO = HohmannTransfer(testCase.LEO_ALTITUDE, testCase.GEO_ALTITUDE);
            testCase.transferLEOtoMEO = HohmannTransfer(testCase.LEO_ALTITUDE, testCase.MEO_ALTITUDE);
        end
    end
    
    methods(Test)
        function testConstructorValidation(testCase)
            % Test input validation
            testCase.verifyError(@() HohmannTransfer(-100, 1000), 'MATLAB:validators:mustBePositive');
            testCase.verifyError(@() HohmannTransfer(0, 1000), 'MATLAB:validators:mustBePositive');
            testCase.verifyError(@() HohmannTransfer(1000, -100), 'MATLAB:validators:mustBePositive');
            testCase.verifyError(@() HohmannTransfer(1000, 0), 'MATLAB:validators:mustBePositive');
            testCase.verifyError(@() HohmannTransfer('invalid', 1000), 'MATLAB:validators:mustBeNumeric');
        end
        
        function testOrbitalParameters(testCase)
            % Test orbital radius calculations
            transfer = testCase.transferLEOtoGEO;
            R_EARTH = 6378.137;
            
            expectedR1 = testCase.LEO_ALTITUDE + R_EARTH;
            expectedR2 = testCase.GEO_ALTITUDE + R_EARTH;
            expectedSMA = (expectedR1 + expectedR2) / 2;
            
            testCase.verifyEqual(transfer.r1, expectedR1, 'AbsTol', testCase.EPSILON);
            testCase.verifyEqual(transfer.r2, expectedR2, 'AbsTol', testCase.EPSILON);
            testCase.verifyEqual(transfer.a_transfer, expectedSMA, 'AbsTol', testCase.EPSILON);
        end
        
        function testDeltaVCalculations(testCase)
            % Test delta-V calculations for LEO to GEO transfer
            transfer = testCase.transferLEOtoGEO;
            MU = 398600.4418;
            
            % Manual calculation of expected values
            r1 = transfer.r1;
            r2 = transfer.r2;
            a = transfer.a_transfer;
            
            v1 = sqrt(MU/r1);
            v2 = sqrt(MU/r2);
            vt1 = sqrt(MU * (2/r1 - 1/a));
            vt2 = sqrt(MU * (2/r2 - 1/a));
            
            expectedDeltaV1 = vt1 - v1;
            expectedDeltaV2 = v2 - vt2;
            expectedTotalDeltaV = expectedDeltaV1 + expectedDeltaV2;
            
            % Verify calculations
            testCase.verifyEqual(transfer.delta_v_departure, expectedDeltaV1, 'AbsTol', testCase.EPSILON);
            testCase.verifyEqual(transfer.delta_v_arrival, expectedDeltaV2, 'AbsTol', testCase.EPSILON);
            testCase.verifyEqual(transfer.delta_v_total, expectedTotalDeltaV, 'AbsTol', testCase.EPSILON);
        end
        
        function testTransferTime(testCase)
            % Test transfer time calculation
            transfer = testCase.transferLEOtoGEO;
            MU = 398600.4418;
            
            expectedTime = pi * sqrt(transfer.a_transfer^3 / MU);
            testCase.verifyEqual(transfer.transfer_time, expectedTime, 'AbsTol', testCase.EPSILON);
        end
        
        function testEdgeCases(testCase)
            % Test edge cases with very small and large altitude differences
            % Small altitude change
            smallTransfer = HohmannTransfer(400, 401);
            testCase.verifyGreaterThan(smallTransfer.delta_v_total, 0);
            testCase.verifyLessThan(smallTransfer.delta_v_total, 0.1); % Should be very small
            
            % Large altitude change
            largeTransfer = HohmannTransfer(400, 100000);
            testCase.verifyGreaterThan(largeTransfer.delta_v_total, 0);
            testCase.verifyGreaterThan(largeTransfer.transfer_time, 0);
        end
        
        function testVisualization(testCase)
            % Test that visualization runs without errors
            transfer = testCase.transferLEOtoGEO;
            
            % Verify no errors in visualization
            try
                fig = figure('Visible', 'off');  % Create invisible figure
                transfer.visualizeTransfer();
                close(fig);
                testCase.verifyTrue(true);  % If we get here, no errors occurred
            catch
                testCase.verifyTrue(false, 'Visualization failed');
            end
        end
        
        function testPhysicalConsistency(testCase)
            % Test physical consistency of the results
            transfer = testCase.transferLEOtoMEO;
            
            % Verify basic physical constraints
            testCase.verifyGreaterThan(transfer.delta_v_total, 0);
            testCase.verifyGreaterThan(transfer.transfer_time, 0);
            
            % Verify that total delta-V is less than direct transfer
            MU = 398600.4418;
            directDeltaV = abs(sqrt(MU/transfer.r2) - sqrt(MU/transfer.r1));
            testCase.verifyLessThan(transfer.delta_v_total, directDeltaV);
        end
    end
end
